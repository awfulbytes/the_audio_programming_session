/*
this is the way to save main funcs
*/
// nscale main shit
#include <stdio.h>
#include "nscale.h"

int main(int argc, char* argv[]) {
if (argc != 3) {
printf("usage: ./nscale notes_quant_per_OCT midinote_code\n");
printf("usage: ________ ----1 ...... 24---- ____0-127____\n");
printf("\n");
return 1;
}

int notes, midinote;

notes = atoi(argv[1]);

if (notes < 1) {
printf("Error: Notes number must be positive and bigger than 0\n");
return 1;
}

if (notes > 24) {
printf("Error: Notes number must be at max = 24\n");
return 1;
}

midinote = atoi(argv[2]);

if (midinote < 0) {
printf("Error: Cannot have negative Midi Notes!\n");
return 1;
}

if (midinote > 127) {
printf("Error: Maximum Midi Note is 127\n");
return 1;
}

scaler(notes, midinote);
return 0;
}

// breakpoint main func

#include <stdlib.h>
#include <stdio.h>
#include "brkpnt.h"

int main(int argc, char* argv[]) {
long size;
double dur;
brkpnt_t point, *points;
FILE* fp;

printf("breakdur: find the duration of breakpoint file\n");

if (argc < 2) {
printf("usage: <bin_name> infile.txt \n");
return 0;
}

fp = fopen(argv[1], "r");
if (fp == NULL) {
return 0;
}

size = 0;
points = get_brkpnts(fp, &size);
if (points == NULL) {
printf("No breakpoints in the file\n");
fclose(fp);
return 1;
}
if (size < 2) {
printf("Error: at least 2 breakpoints are required\n");
free(points);
fclose(fp);
return 1;
}

// NOTE: breakpoints need to start at 0
if (points[0].time != 0.0) {
printf("Error: in datapoints: time must start @0.0\n");
free(points);
fclose(fp);
return 1;
}
printf("read %.2ld breakpoints\n", size);

dur = points[size - 1].time;
printf("duration: %f seconds\n", dur);

point = maxpoint(points, size);
printf("max value: %f at %f seconds\n", point.value, point.time);
free(points);
fclose(fp);
return 0;
}

/* this is for saving */
int i, sr, nsamps;
double samp, dur, freq, srate, amp, maxsamp;
double twopi = 2.0 * M_PI;
double start, end, fac, angleincr;
FILE* fp = NULL;

fp = fopen(argv[ARG_OUTFILE], "w");
if(fp == NULL){
fprintf(stderr, "Error creating the output file %s\n", argv[ARG_OUTFILE]);
return 1;
}

dur = atof(argv[ARG_DUR]);
freq = atof(argv[ARG_HZ]);
srate = atof(argv[ARG_SR]);
amp = atof(argv[ARG_AMP]);
nsamps = (int) (dur * srate);
angleincr = twopi * freq / srate;

start = 1.0;
end = 1.0e-4;
maxsamp = 0.0;
fac = pow(end/start, 1.0/nsamps);

for(i = 0; i < nsamps; i++){
samp = amp * sin(angleincr * i);
samp *= start;
start *= fac;
fprintf(fp, "%.8lf\n", samp);

if(fabs(samp) > maxsamp){
maxsamp = fabs(samp);
}
}
fclose(fp);
fprintf(stdout, "done. Max sample value = %.8lf\n", maxsamp);

/* TODO: MAKE THIS WORK
 * We need to be able to allocate memory in big systems but in embedded is not
 * so useful. Need to see how to make this for sure here but skiping for now.
 */
#include <stdio.h>
#include <stdlib.h>

#include <portsf.h>

enum {arg_name, arg_infile, arg_outfile, arg_nargs};

int main(int argc, char* argv[]) {

    if(argc < arg_nargs) {
        fprintf(stderr, "Usage: <bin_name> infile outfile\n");
        return 1;
    }

    int tester = 0;
    int bufsize = 1024 * 8;
    PSF_PROPS props;
    long totalread;
    // NOTE::: move all to default for freeing easy and with less shit.
    int ifd = -1, ofd = -1;
    float *multiframe[bufsize];
    int error = 0;
    psf_format outfrmt = PSF_FMT_UNKNOWN;
    PSF_CHPEAK *peaks = NULL;
    float *frame = NULL;

    printf("Converting soundfile to floats format\n");

    /* be good and startup portsf (embedded smell) */
    if(psf_init()){
        printf("unable to start portsf for some god damn reason");
        return 1;
    }

    ifd = psf_sndOpen(argv[arg_infile], &props, 0);
    if (ifd < 0) {
        printf("Error: unable to open input file %s", argv[arg_infile]);
        return 1;
    }

    if (props.samptype == PSF_SAMP_IEEE_FLOAT){
        printf("INFO: input file is already floats bro..\n");
    }
    props.samptype = PSF_SAMP_IEEE_FLOAT;
    outfrmt = psf_getFormatExt(argv[arg_outfile]);
    if (outfrmt == PSF_FMT_UNKNOWN){
        printf("output file name %s has unknown format.\n"
               "Use any of .wav, .aiff, .aif, .afc, .aifc\n",
               argv[arg_outfile]);
        error++;
        goto exit;
    }
    props.format = outfrmt;

    ofd = psf_sndCreate(argv[arg_outfile], &props, 0, 0, PSF_CREATE_RDWR);
    if (ofd < 0){
        printf("Error: unable to create output file %s\n", argv[arg_outfile]);
        error++;
        goto exit;

    }

    /* allocate memory for one sample frame in RAM */
    frame = (float*) malloc(props.chans * sizeof(float));
    if (frame == NULL){
        puts("No memory!\n");
        error++;
        goto exit;
    }

    /* allocate space for PEAK info */
    peaks = (PSF_CHPEAK*) malloc(props.chans * sizeof(PSF_CHPEAK));
    if (peaks == NULL){
        puts("no mem brother!\n");
        error++;
        goto exit;
    }

    *multiframe = (float *) malloc(25 * sizeof(multiframe));
    if (multiframe[bufsize] == NULL){
        puts("no mem brother!!\n");
        error++;
        goto exit;
    }
    printf("copying... ... ...!\n");

    /* single-frame loop to do the copy report anyerr */
    totalread = 0;
    for (int i = 0; i < bufsize; i++) {
        multiframe[i] = (float *) psf_sndReadFloatFrames(ifd, frame, 1);
        printf("multiframe: %pt\n", *multiframe);
    }
    printf("DONE READING!\n");
    while (**multiframe == 1) {
        totalread++;
        if (psf_sndWriteFloatFrames(ofd, *multiframe, bufsize) != 1) {
            printf("Error: writing to output file\n");
            error++;
            break;
        }
        *multiframe[bufsize] = psf_sndReadFloatFrames(ifd, *multiframe, bufsize);
        if (multiframe < 0) {
            printf("Error: reading input file. output is incomplete.\n");
            error++;
        } else {
            continue;
        }
        tester++;
    }

    printf("%d buffers used to copy of size %d\n", tester, bufsize);
    printf("Done! %ld sample frames copied to %s\n", totalread,
           argv[arg_outfile]);
    if (psf_sndReadPeaks(ofd, peaks, NULL) > 0) {
      long i;
      double peak_time;
      printf("PEAK INFO: \n");
      for (i = 0; i < props.chans; i++) {
        peak_time = (double)peaks[i].pos / props.srate;
        printf("CH: %ld:\t%.4f at %.4f secs\n", i + 1, peaks[i].val, peak_time);
      }
    }
exit:
  if (ifd >= 0)
    psf_sndClose(ifd);
  if (ofd >= 0)
    psf_sndClose(ofd);
  if (frame)
    free(frame);
  if (peaks)
    free(peaks);
  psf_finish();
  return error;

  return 0;
}
